diff --git a/firedrake/__init__.py b/firedrake/__init__.py
index 96b95a70..a7d17b07 100644
--- a/firedrake/__init__.py
+++ b/firedrake/__init__.py
@@ -1,18 +1,22 @@
 import firedrake_configuration
 import os
+
+# Check that --honour-petsc-dir and PETSC_DIR/PETSC_ARCH make sense together
 import sys
 config = firedrake_configuration.get_config()
-if "PETSC_DIR" in os.environ and not config["options"]["honour_petsc_dir"]:
-    if os.environ["PETSC_DIR"] != os.path.join(sys.prefix, "src", "petsc")\
-       or os.environ["PETSC_ARCH"] != "default":
-        raise ImportError("PETSC_DIR is set, but you did not install with --honour-petsc-dir.\n"
-                          "Please unset PETSC_DIR (and PETSC_ARCH) before using Firedrake.")
-elif "PETSC_DIR" not in os.environ and config["options"]["honour_petsc_dir"]:
-    raise ImportError("Firedrake was installed with --honour-petsc-dir, but PETSC_DIR is not set.\n"
-                      "Please set PETSC_DIR (and PETSC_ARCH) before using Firedrake.")
-elif not config["options"]["honour_petsc_dir"]:  # Using our own PETSC.
-    os.environ["PETSC_DIR"] = os.path.join(sys.prefix, "src", "petsc")
-    os.environ["PETSC_ARCH"] = "default"
+# This check is only valid for the default install method, not when using Spack
+if config["options"].get("install_mode", "default") == "default":
+    if "PETSC_DIR" in os.environ and not config["options"]["honour_petsc_dir"]:
+        if os.environ["PETSC_DIR"] != os.path.join(sys.prefix, "src", "petsc")\
+           or os.environ["PETSC_ARCH"] != "default":
+            raise ImportError("PETSC_DIR is set, but you did not install with --honour-petsc-dir.\n"
+                              "Please unset PETSC_DIR (and PETSC_ARCH) before using Firedrake.")
+    elif "PETSC_DIR" not in os.environ and config["options"]["honour_petsc_dir"]:
+        raise ImportError("Firedrake was installed with --honour-petsc-dir, but PETSC_DIR is not set.\n"
+                          "Please set PETSC_DIR (and PETSC_ARCH) before using Firedrake.")
+    elif not config["options"]["honour_petsc_dir"]:  # Using our own PETSC.
+        os.environ["PETSC_DIR"] = os.path.join(sys.prefix, "src", "petsc")
+        os.environ["PETSC_ARCH"] = "default"
 del sys, config
 
 # Ensure petsc is initialised by us before anything else gets in there.
diff --git a/firedrake/slate/slac/compiler.py b/firedrake/slate/slac/compiler.py
index 2432d277..8e262d93 100644
--- a/firedrake/slate/slac/compiler.py
+++ b/firedrake/slate/slac/compiler.py
@@ -30,7 +30,7 @@ from firedrake import op2
 from firedrake.logging import logger
 from firedrake.parameters import parameters
 from firedrake.petsc import get_petsc_variables
-from firedrake.utils import complex_mode, ScalarType_c, as_cstr
+from firedrake.utils import complex_mode, ScalarType_c, as_cstr, get_eigen_include_dir
 from ufl.log import GREEN
 from gem.utils import groupby
 from gem import impero_utils
@@ -63,13 +63,12 @@ BLASLAPACK_LIB = None
 BLASLAPACK_INCLUDE = None
 if not complex_mode:
     if COMM_WORLD.rank == 0:
-        petsc_variables = get_petsc_variables()
-        EIGEN_INCLUDE_DIR = petsc_variables.get("EIGEN_INCLUDE")
+        EIGEN_INCLUDE_DIR = get_eigen_include_dir()
         if EIGEN_INCLUDE_DIR is None:
             raise ValueError("""Could not find Eigen configuration in %s. Did you build PETSc with Eigen?""" % PETSC_ARCH or PETSC_DIR)
-        EIGEN_INCLUDE_DIR = EIGEN_INCLUDE_DIR.lstrip('-I')
         EIGEN_INCLUDE_DIR = COMM_WORLD.bcast(EIGEN_INCLUDE_DIR, root=0)
 
+        petsc_variables = get_petsc_variables()
         BLASLAPACK_LIB = petsc_variables.get("BLASLAPACK_LIB", "")
         BLASLAPACK_LIB = COMM_WORLD.bcast(BLASLAPACK_LIB, root=0)
         BLASLAPACK_INCLUDE = petsc_variables.get("BLASLAPACK_INCLUDE", "")
diff --git a/firedrake/utils.py b/firedrake/utils.py
index 81a09fb9..708fec87 100644
--- a/firedrake/utils.py
+++ b/firedrake/utils.py
@@ -1,11 +1,14 @@
 # Some generic python utilities not really specific to our work.
 from decorator import decorator
+import functools
+
 from pyop2.utils import cached_property  # noqa: F401
 from pyop2.datatypes import ScalarType, as_cstr
 from pyop2.datatypes import RealType     # noqa: F401
 from pyop2.datatypes import IntType      # noqa: F401
 from pyop2.datatypes import as_ctypes    # noqa: F401
 from firedrake_configuration import get_config
+from firedrake.petsc import get_petsc_variables
 
 _current_uid = 0
 
@@ -74,3 +77,21 @@ def known_pyop2_safe(f):
         finally:
             opts["type_check"] = check
     return decorator(wrapper, f)
+
+
+@functools.lru_cache(maxsize=None)
+def get_eigen_include_dir():
+    """Return the include directory for Eigen.
+
+    Depending on how Eigen was installed this will either be defined in
+    petscvariables or the Firedrake configuration file.
+
+    Returns ``None`` if not found.
+    """
+    try:
+        return get_petsc_variables()["EIGEN_INCLUDE"].lstrip("-I")
+    except KeyError:
+        try:
+            return get_config()["libraries"]["EIGEN_INCLUDE_DIR"]
+        except KeyError:
+            return None
diff --git a/firedrake_configuration/__init__.py b/firedrake_configuration/__init__.py
index f6e49857..2dccc3f3 100644
--- a/firedrake_configuration/__init__.py
+++ b/firedrake_configuration/__init__.py
@@ -22,7 +22,7 @@ except IOError:
             _config = json.load(f)
 
     except IOError:
-        _config = None
+        _config = {"options": {}}
 
 
 def get_config():
diff --git a/setup.py b/setup.py
index 0b7c0c5a..3b764372 100644
--- a/setup.py
+++ b/setup.py
@@ -22,16 +22,9 @@ except ImportError:
 
 
 def get_petsc_dir():
-    try:
-        petsc_dir = os.environ["PETSC_DIR"]
-        petsc_arch = os.environ.get("PETSC_ARCH", "")
-    except KeyError:
-        try:
-            petsc_dir = os.path.join(os.environ["VIRTUAL_ENV"], "src", "petsc")
-            petsc_arch = "default"
-        except KeyError:
-            sys.exit("""Error: Firedrake venv not active.""")
-
+    config = petsc4py.get_config()
+    petsc_dir = config["PETSC_DIR"]
+    petsc_arch = config["PETSC_ARCH"]
     return (petsc_dir, path.join(petsc_dir, petsc_arch))
 
 
@@ -71,9 +64,6 @@ extensions = [Extension("firedrake.cython.{}".format(ext),
                         libraries=libs,
                         extra_link_args=link_args,
                         cython_compile_time_env=cython_compile_time_env) for (ext, libs) in cythonfiles]
-if 'CC' not in env:
-    env['CC'] = "mpicc"
-
 
 setup(name='firedrake',
       version=versioneer.get_version(),
